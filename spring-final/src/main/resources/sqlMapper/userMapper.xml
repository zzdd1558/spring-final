<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userMapper">
	
	<resultMap type="FavoriteCosmeticDTO" id="favorResultMap">
		<result column="PROD_IDX" property="prodIdx"/>
		<result column="USER_KEY"  property="userKeyPkFk" />	
	</resultMap>

	<resultMap type="userDTO" id="userResultMap">
		<result column="USER_KEY" property="userKey" />
		<result column="USER_ID" property="userId" />
		<result column="USER_PASSWORD" property="userPassword" />
		<result column="USER_NAME" property="userName" />
		<result column="USER_GENDER" property="userGender" />
		<result column="USER_BIRTH" property="userBirth" />
		<result column="USER_PHONE" property="userPhone" />
		<result column="USER_EMAIL" property="userEmail" />
		<result column="USER_ADDR" property="userAddr" />
		<result column="USER_ANSWER" property="userAnswer" />
		<result column="USER_POINT" property="userPoint" />
		<result column="USER_TOTAL_POINT" property="userTotalPoint" />
		<result column="USER_JOIN_DATE" property="userJoinDate" />
		<result column="RATING_TYPE" property="ratingType" />
		<result column="QUESTION_KEY" property="questionKey" />
	</resultMap>
	
	<!--  모든 회원 정보 가져오기 -->
	<select id="userSearchAll" resultMap="userResultMap">
		SELECT * FROM USER_TB
	</select>

	<!-- 회원 insert하는 부분 -->
	<insert id="insertUser" parameterType="userDTO"  >
		INSERT INTO USER_TB 
		    VALUES ( #{userKey} , #{userId} , #{userPassword} ,
		             #{userName} , #{userGender} , #{userBirth} , 
		             #{userPhone} , #{userEmail}, #{userAddr} ,
		             #{userAnswer} , 0 , 0 , SYSDATE , #{ratingType} , #{questionKey} )
	</insert>

	<!-- 주키  max값 가져오기 -->
	<select id="userMaxIdx" resultType="String">
		SELECT MAX(USER_KEY) FROM
		USER_TB
	</select>
	
	<!-- 회원 ID로 회원에 대한 정보 가져오기 -->
	<select id="selectUserById" parameterType="String" resultMap="userResultMap">
		SELECT * FROM USER_TB WHERE USER_ID = #{userId}
	</select>
	
	<!-- 회원 번호로 회원에 대한 정보 가져오기 -->
	<select id="selectUserByUserkey" parameterType="int" resultMap="userResultMap">
		SELECT * FROM USER_TB WHERE USER_KEY = #{userKey}
	</select>
	
	<!-- 회원 승인시 업데이트 -->
	<update id="userPermissionUpdate" parameterType="string">
		UPDATE USER_TB SET RATING_TYPE = 'ROLE_B' WHERE USER_ID = #{userId}
	</update>
	
	<!-- 사용자 입력값으로 회원정보 가져오기 -->
	<select id="selectIdAndKey" parameterType="userDTO" resultMap="userResultMap">
		SELECT * FROM USER_TB WHERE USER_NAME=#{userName} AND USER_EMAIL=#{userEmail}
	</select>
	
	<!-- 비밀번호를 찾고자 하는 user가 존재하는지 -->
	<select id="findPassword" parameterType="userDTO" resultMap="userResultMap">
		SELECT * FROM USER_TB 
			WHERE USER_NAME = #{userName} AND USER_ID = #{userId} AND USER_EMAIL = #{userEmail} AND
				  QUESTION_KEY = #{questionKey} AND USER_ANSWER = #{userAnswer}
	</select>
	
	<update id="changePassword" parameterType="userDTO">
		UPDATE USER_TB 
			SET USER_PASSWORD = #{userPassword} 
		WHERE USER_ID = #{userId}
	</update>
	
	<!-- 회원 아이디 비교하여 회원정보 변경하기 -->
	<update id="updateUserInfo" parameterType="userDTO">
		UPDATE USER_TB 
			SET USER_POINT = #{userPoint}, USER_TOTAL_POINT = #{userTotalPoint}, RATING_TYPE = #{ratingType}
		WHERE USER_ID = #{userId}
	</update>
	
	<select id="userNameSelect" parameterType="int" resultType="String">
		SELECT USER_TB.USER_NAME
		FROM USER_TB
		WHERE USER_KEY=#{userKey}
	</select>
	
	<insert id="favoriteProd" parameterType="FavoriteCosmeticDTO">
		INSERT
		INTO FAVORITE_COSMETIC_TB
		VALUES (#{userKeyPkFk},#{prodIdx})
	</insert>
	
	<select id="searchFavProd" parameterType="FavoriteCosmeticDTO" resultType="int">
		SELECT COUNT(*)
		FROM   FAVORITE_COSMETIC_TB
		WHERE  PROD_IDX=#{prodIdx} AND USER_KEY=#{userKeyPkFk}
	</select>


	<select id="listAll" parameterType="hashMap" resultMap="userResultMap">
		<include refid="pagingHeader"></include>
		SELECT
		USER_TB.*
		FROM USER_TB
		ORDER BY USER_KEY DESC
		<include refid="pagingFooter"></include>
	</select>
				<!-- 페이징 sql -->
				<sql id="pagingHeader">
					SELECT * FROM (
					SELECT ROWNUM AS rn, A.* FROM (
				</sql>
				<sql id="pagingFooter">
					) A
					) WHERE rn BETWEEN #{start} AND #{end}
				</sql>
				
	<delete id="deleteUserByUserKey" parameterType="userDTO">
		DELETE FROM USER_TB WHERE USER_KEY = #{userKey} 
	</delete>
	
</mapper>